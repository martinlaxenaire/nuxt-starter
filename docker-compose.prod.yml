#
# This is an example production docker-compose file
# with Nginx running between NodeJS and Varnish to allow
# overriding HTTP static files and configure headers
#
version: '3'
services:
    app:
        env_file: ./.env
        image: ${REGISTRY_BASE_URL}/node:develop
        networks:
            - default
        restart: always
        volumes:
            - ./.env:/usr/src/nuxt-app/.env:ro
        labels:
            - "com.centurylinklabs.watchtower.enable=true"

    nginx:
        image: ${REGISTRY_BASE_URL}/nginx:develop
        networks:
            - default
        restart: always
        depends_on:
            - app
        links:
            - app:app
        volumes:
            - ./robots.txt:/usr/share/nginx/app/robots.txt:ro
            - ./custom-nginx.conf:/etc/nginx/nginx.conf:ro
        labels:
            - "com.centurylinklabs.watchtower.enable=true"

    varnish:
        image: ${REGISTRY_BASE_URL}/varnish:develop
        networks:
            - frontproxynet
            - default
        restart: always
        tmpfs: /var/lib/varnish/varnishd:exec
        # https://github.com/varnish/docker-varnish/issues/53
        user: root
        volumes:
            - ./default.vcl:/etc/varnish/default.vcl:ro
        environment:
            VARNISH_SIZE: 2G
        depends_on:
            - nginx
        links:
            - nginx:nginx
        labels:
            - "traefik.enable=true"
            - "com.centurylinklabs.watchtower.enable=true"
            # Traefik v2 -----------------------------------------------------
            - "traefik.http.services.${TRAEFIK_NAMESPACE}.loadbalancer.server.scheme=http"
            - "traefik.http.services.${TRAEFIK_NAMESPACE}.loadbalancer.server.port=80"
            - "traefik.http.services.${TRAEFIK_NAMESPACE}.loadbalancer.passhostheader=true"
            # Listen HTTP
            - "traefik.http.routers.${TRAEFIK_NAMESPACE}.entrypoints=http"
            - "traefik.http.routers.${TRAEFIK_NAMESPACE}.rule=Host(${TRAEFIK_HOSTNAME})"
            - "traefik.http.routers.${TRAEFIK_NAMESPACE}.service=${TRAEFIK_NAMESPACE}"
            # Listen HTTPS
            - "traefik.http.routers.${TRAEFIK_NAMESPACE}-secure.entrypoints=https"
            - "traefik.http.routers.${TRAEFIK_NAMESPACE}-secure.tls=true"
            - "traefik.http.routers.${TRAEFIK_NAMESPACE}-secure.tls.certresolver=letsencrypt"
            - "traefik.http.routers.${TRAEFIK_NAMESPACE}-secure.rule=Host(${TRAEFIK_HOSTNAME})"
            - "traefik.http.routers.${TRAEFIK_NAMESPACE}-secure.service=${TRAEFIK_NAMESPACE}"
            # Apply middlewares
            - "traefik.http.routers.${TRAEFIK_NAMESPACE}-secure.middlewares=${TRAEFIK_NAMESPACE}Redirectregex,${TRAEFIK_NAMESPACE}Sts"
            - "traefik.http.routers.${TRAEFIK_NAMESPACE}.middlewares=${TRAEFIK_NAMESPACE}Redirectregex,${TRAEFIK_NAMESPACE}Redirectscheme"
            ## Define Middlewares
            ## Add a Basic auth protection
            - "traefik.http.middlewares.${TRAEFIK_NAMESPACE}Auth.basicauth.users=${AUTH_BASIC}"
            ## IP Whitelist
            #- "traefik.http.middlewares.${TRAEFIK_NAMESPACE}Ipwhitelist.ipwhitelist.sourcerange=${IP_RANGE}"
            ### If using Cloudflare
            #- "traefik.http.middlewares.${TRAEFIK_NAMESPACE}Ipwhitelist.ipwhitelist.ipstrategy.depth=1"
            ## Add domain redirection (${TRAEFIK_NAMESPACE} non-www to www redir)
            #- "traefik.http.middlewares.${TRAEFIK_NAMESPACE}Redirectregex.redirectregex.regex=${REDIRECT_REGEX}"
            #- "traefik.http.middlewares.${TRAEFIK_NAMESPACE}Redirectregex.redirectregex.replacement=${REDIRECT_REPLACEMENT}"
            #- "traefik.http.middlewares.${TRAEFIK_NAMESPACE}Redirectregex.redirectregex.permanent=true"
            ## Add SSL redirection
            - "traefik.http.middlewares.${TRAEFIK_NAMESPACE}Redirectscheme.redirectscheme.scheme=https"
            - "traefik.http.middlewares.${TRAEFIK_NAMESPACE}Redirectscheme.redirectscheme.permanent=true"
            # HSTS headers
            - "traefik.http.middlewares.${TRAEFIK_NAMESPACE}Sts.headers.stsincludesubdomains=false"
            - "traefik.http.middlewares.${TRAEFIK_NAMESPACE}Sts.headers.stspreload=true"
            - "traefik.http.middlewares.${TRAEFIK_NAMESPACE}Sts.headers.stsseconds=31536000"
            - "traefik.http.middlewares.${TRAEFIK_NAMESPACE}Sts.headers.isdevelopment=false"

    # Expose your storybook with a dedicated domain-name
    storybook:
        env_file:
            - .env.storybook
        image: ${REGISTRY_BASE_URL}/storybook-static
        restart: always
        networks:
            - frontproxynet
        volumes:
            - ./.env:/usr/share/nginx/html/.env:ro
        labels:
            - "traefik.enable=true"
            - "com.centurylinklabs.watchtower.enable=true"
            # Traefik v2 -----------------------------------------------------
            - "traefik.http.services.${SB_TRAEFIK_NAMESPACE}.loadbalancer.server.scheme=http"
            - "traefik.http.services.${SB_TRAEFIK_NAMESPACE}.loadbalancer.server.port=80"
            - "traefik.http.services.${SB_TRAEFIK_NAMESPACE}.loadbalancer.passhostheader=true"
            # Listen HTTP
            - "traefik.http.routers.${SB_TRAEFIK_NAMESPACE}.entrypoints=http"
            - "traefik.http.routers.${SB_TRAEFIK_NAMESPACE}.rule=Host(${SB_TRAEFIK_HOSTNAME})"
            - "traefik.http.routers.${SB_TRAEFIK_NAMESPACE}.service=${SB_TRAEFIK_NAMESPACE}"
            # Listen HTTPS
            - "traefik.http.routers.${SB_TRAEFIK_NAMESPACE}-secure.entrypoints=https"
            - "traefik.http.routers.${SB_TRAEFIK_NAMESPACE}-secure.tls=true"
            - "traefik.http.routers.${SB_TRAEFIK_NAMESPACE}-secure.tls.certresolver=letsencrypt"
            - "traefik.http.routers.${SB_TRAEFIK_NAMESPACE}-secure.rule=Host(${SB_TRAEFIK_HOSTNAME})"
            - "traefik.http.routers.${SB_TRAEFIK_NAMESPACE}-secure.service=${SB_TRAEFIK_NAMESPACE}"
            # Apply middlewares
            - "traefik.http.routers.${SB_TRAEFIK_NAMESPACE}-secure.middlewares=${TRAEFIK_NAMESPACE}Auth"
            - "traefik.http.routers.${SB_TRAEFIK_NAMESPACE}.middlewares=${TRAEFIK_NAMESPACE}Auth,${SB_TRAEFIK_NAMESPACE}Redirectscheme"
            # Define Middlewares
            # Add SSL redirection
            - "traefik.http.middlewares.${SB_TRAEFIK_NAMESPACE}Redirectscheme.redirectscheme.scheme=https"
            - "traefik.http.middlewares.${SB_TRAEFIK_NAMESPACE}Redirectscheme.redirectscheme.permanent=true"

    intervention:
        env_file:
            - .env.storybook
        image: ambroisemaupate/intervention-request:latest
        networks:
            - frontproxynet
        volumes:
            # Mount host path as a volume
            - ./images:/var/www/html/web/images:ro
        labels:
            - "traefik.enable=true"
            - "com.centurylinklabs.watchtower.enable=true"
            # Traefik v2 -----------------------------------------------------
            - "traefik.http.services.${SB_TRAEFIK_NAMESPACE}_IR.loadbalancer.server.scheme=http"
            - "traefik.http.services.${SB_TRAEFIK_NAMESPACE}_IR.loadbalancer.server.port=80"
            - "traefik.http.services.${SB_TRAEFIK_NAMESPACE}_IR.loadbalancer.passhostheader=true"
            # Listen HTTP
            - "traefik.http.routers.${SB_TRAEFIK_NAMESPACE}_IR.entrypoints=http"
            - "traefik.http.routers.${SB_TRAEFIK_NAMESPACE}_IR.rule=Host(${SB_TRAEFIK_HOSTNAME}) && PathPrefix(`/assets`)"
            - "traefik.http.routers.${SB_TRAEFIK_NAMESPACE}_IR.service=${SB_TRAEFIK_NAMESPACE}_IR"
            # Listen HTTPS
            - "traefik.http.routers.${SB_TRAEFIK_NAMESPACE}_IR-secure.entrypoints=https"
            - "traefik.http.routers.${SB_TRAEFIK_NAMESPACE}_IR-secure.tls=true"
            - "traefik.http.routers.${SB_TRAEFIK_NAMESPACE}_IR-secure.tls.certresolver=letsencrypt"
            - "traefik.http.routers.${SB_TRAEFIK_NAMESPACE}_IR-secure.rule=Host(${SB_TRAEFIK_HOSTNAME}) && PathPrefix(`/assets`)"
            - "traefik.http.routers.${SB_TRAEFIK_NAMESPACE}_IR-secure.service=${SB_TRAEFIK_NAMESPACE}_IR"
            # Apply middlewares
            - "traefik.http.routers.${SB_TRAEFIK_NAMESPACE}_IR-secure.middlewares=${TRAEFIK_NAMESPACE}Auth"
            - "traefik.http.routers.${SB_TRAEFIK_NAMESPACE}_IR.middlewares=${TRAEFIK_NAMESPACE}Auth,${SB_TRAEFIK_NAMESPACE}_IRRedirectscheme"
            # Define Middlewares
            # Add SSL redirection
            - "traefik.http.middlewares.${SB_TRAEFIK_NAMESPACE}_IRRedirectscheme.redirectscheme.scheme=https"
            - "traefik.http.middlewares.${SB_TRAEFIK_NAMESPACE}_IRRedirectscheme.redirectscheme.permanent=true"

networks:
    frontproxynet:
        external: true
# Define default network subnet if docker cannot allocate it.
#    default:
#        ipam:
#            driver: default
#            config:
#                -   subnet: ${DEFAULT_GATEWAY}/16
