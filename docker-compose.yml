version: "3.6"
services:
    # Testing nuxt output
    app:
        env_file:
            - .env
        networks:
            - frontproxynet
            - default
        build:
            # Run yarn build before building the docker image
            context: .
            dockerfile: .docker/node/Dockerfile
        labels:
            - "traefik.enable=true"
            - "traefik.http.services.${TRAEFIK_NAMESPACE_NUXT}.loadbalancer.server.scheme=http"
            - "traefik.http.services.${TRAEFIK_NAMESPACE_NUXT}.loadbalancer.server.port=5000"
            - "traefik.http.services.${TRAEFIK_NAMESPACE_NUXT}.loadbalancer.passhostheader=true"
            # Listen HTTP
            - "traefik.http.routers.${TRAEFIK_NAMESPACE_NUXT}.entrypoints=http"
            - "traefik.http.routers.${TRAEFIK_NAMESPACE_NUXT}.rule=Host(${TRAEFIK_HOSTNAME_NUXT})"
            - "traefik.http.routers.${TRAEFIK_NAMESPACE_NUXT}.service=${TRAEFIK_NAMESPACE_NUXT}"
            # Listen HTTPS
            - "traefik.http.routers.${TRAEFIK_NAMESPACE_NUXT}_ssl.entrypoints=https"
            - "traefik.http.routers.${TRAEFIK_NAMESPACE_NUXT}_ssl.tls=true"
            - "traefik.http.routers.${TRAEFIK_NAMESPACE_NUXT}_ssl.rule=Host(${TRAEFIK_HOSTNAME_NUXT})"
            - "traefik.http.routers.${TRAEFIK_NAMESPACE_NUXT}_ssl.service=${TRAEFIK_NAMESPACE_NUXT}"

    # Testing nginx output
    nginx:
        build:
            context: .
            dockerfile: .docker/nginx/Dockerfile
        networks:
            - frontproxynet
            - default
        restart: always
        depends_on:
            - app
        links:
            - app:app
        labels:
            - "traefik.enable=true"
            - "traefik.http.services.${TRAEFIK_NAMESPACE}.loadbalancer.server.scheme=http"
            - "traefik.http.services.${TRAEFIK_NAMESPACE}.loadbalancer.server.port=80"
            - "traefik.http.services.${TRAEFIK_NAMESPACE}.loadbalancer.passhostheader=true"
            # Listen HTTP
            - "traefik.http.routers.${TRAEFIK_NAMESPACE}.entrypoints=http"
            - "traefik.http.routers.${TRAEFIK_NAMESPACE}.rule=Host(${TRAEFIK_HOSTNAME})"
            - "traefik.http.routers.${TRAEFIK_NAMESPACE}.service=${TRAEFIK_NAMESPACE}"
            # Listen HTTPS
            - "traefik.http.routers.${TRAEFIK_NAMESPACE}_ssl.entrypoints=https"
            - "traefik.http.routers.${TRAEFIK_NAMESPACE}_ssl.tls=true"
            - "traefik.http.routers.${TRAEFIK_NAMESPACE}_ssl.rule=Host(${TRAEFIK_HOSTNAME})"
            - "traefik.http.routers.${TRAEFIK_NAMESPACE}_ssl.service=${TRAEFIK_NAMESPACE}"

    # Testing varnish output
    varnish:
        build:
            context: .
            dockerfile: .docker/varnish/Dockerfile
        networks:
            - frontproxynet
            - default
        tmpfs: /var/lib/varnish:exec
        depends_on:
            - nginx
        links:
            - nginx:nginx
        labels:
            - "traefik.enable=true"
            - "traefik.http.services.${TRAEFIK_NAMESPACE_VARNISH}.loadbalancer.server.scheme=http"
            - "traefik.http.services.${TRAEFIK_NAMESPACE_VARNISH}.loadbalancer.server.port=80"
            - "traefik.http.services.${TRAEFIK_NAMESPACE_VARNISH}.loadbalancer.passhostheader=true"
            # Listen HTTP
            - "traefik.http.routers.${TRAEFIK_NAMESPACE_VARNISH}.entrypoints=http"
            - "traefik.http.routers.${TRAEFIK_NAMESPACE_VARNISH}.rule=Host(${TRAEFIK_HOSTNAME_VARNISH})"
            - "traefik.http.routers.${TRAEFIK_NAMESPACE_VARNISH}.service=${TRAEFIK_NAMESPACE_VARNISH}"
            # Listen HTTPS
            - "traefik.http.routers.${TRAEFIK_NAMESPACE_VARNISH}_ssl.entrypoints=https"
            - "traefik.http.routers.${TRAEFIK_NAMESPACE_VARNISH}_ssl.tls=true"
            - "traefik.http.routers.${TRAEFIK_NAMESPACE_VARNISH}_ssl.rule=Host(${TRAEFIK_HOSTNAME_VARNISH})"
            - "traefik.http.routers.${TRAEFIK_NAMESPACE_VARNISH}_ssl.service=${TRAEFIK_NAMESPACE_VARNISH}"

    intervention:
        env_file:
            - .env.storybook
        image: ambroisemaupate/intervention-request:latest
        volumes:
            - ./src/assets/storybook/assets:/var/www/html/web/assets:delegated
            - ./src/assets/storybook/images:/var/www/html/web/images:ro
        ports:
            -  8086:80/tcp

networks:
    frontproxynet:
        external: true
